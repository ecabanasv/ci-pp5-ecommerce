# Generated by Django 3.2 on 2023-04-01 11:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_author_name', message='Name must be alphabetic', regex='^[a-zA-Z\\s]*$')])),
                ('description', models.TextField(blank=True, validators=[django.core.validators.RegexValidator(code='invalid_author_description', message='Description contains invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_category_name', message='Name must be a slug', regex='^[a-z0-9-]+$')])),
                ('description', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_category_description', message='Description contains invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('friendly_name', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(code='invalid_category_friendly_name', message='Friendly name must be alphanumeric', regex='^[a-z0-9-]+$')])),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_publisher_name', message='Name must be alphabetic', regex='^[a-zA-Z\\s]*$')])),
                ('description', models.TextField(blank=True, validators=[django.core.validators.RegexValidator(code='invalid_publisher_description', message='Description contains invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
            ],
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_subcategory_name', message='Name must be a slug', regex='^[a-z0-9-]+$')])),
                ('description', models.TextField(blank=True, null=True, validators=[django.core.validators.RegexValidator(code='invalid_subcategory_description', message='Description contains invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('friendly_name', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(code='invalid_subcategory_friendly_name', message='Friendly name must be alphanumeric', regex='^[a-z0-9-]+$')])),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='products.category')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', models.CharField(max_length=13, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_isbn', message='Invalid ISBN', regex='^(978|979)?\\d{9}(\\d|X)$')])),
                ('title', models.CharField(max_length=60, validators=[django.core.validators.RegexValidator(code='invalid_title', message='Title contains invalid characters', regex='^[a-zA-Z0-9\\s!\\"#$%&\'()*+,-./:;<=>?@[\\\\]^_`{|}~]+$')])),
                ('small_description', models.CharField(blank=True, max_length=200, null=True, validators=[django.core.validators.RegexValidator(code='invalid_small_description', message='Small description contains invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('description', models.TextField(blank=True, max_length=500, validators=[django.core.validators.RegexValidator(code='invalid_description', message='Description contains invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('stock', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('rating', models.FloatField(blank=True, max_length=2, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='book_covers/')),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('pages', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('language', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(code='invalid_language', message='Language must be alphabetic', regex='^[a-zA-Z\\s]+$')])),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='products.author')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='products.category')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='products.publisher')),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='books', to='products.subcategory')),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'book')},
            },
        ),
    ]
